--
-- Embed <files> as static data buffers.
-- The files are embedded at compile time using incbin.
-- This script merely generates the header/source files.
--

	local script_path = path.getdirectory(_SCRIPT)
	local source_path = path.join(script_path, "..", "src")

	function embed(files, queries_c, header)
		local outpath = queries_c
		queries_c = path.getrelative(source_path, queries_c)
		print("generating", queries_c)

		local function symbolicatefile(fn)
			fn = fn:gsub("[/%.]", "_")
			return fn
		end

		-- open queries.c and write the file header
		io.capture()
		local out = io.open(outpath, "w")
		local define = "BROADWAY_" .. symbolicatefile(queries_c):upper() .. "_INC"
		_p("//! DO NOT EDIT - this file is autogenerated.")
		_p("//! Run `genie embed` or `make embed` to re-generate.")
		_p("")

		if header then
			_p("#ifndef %s", define)
			_p("#define %s", define)
			_p("")
		end
		_p("#define INCBIN_PREFIX %s", "g_")
		_p("#define INCBIN_STYLE %s", "INCBIN_STYLE_SNAKE")
		_p("#include %q", "incbin.h")
		_p("")

		for i,fn in ipairs(files) do
			local fi = path.getrelative(source_path, fn)
			local fns = symbolicatefile(path.getrelative(path.getdirectory(outpath), fn))
			if header then
				_p("//! contents of %s", fi)
				_p("INCBIN_EXTERN(%s);", fns)
				_p("const char* g_%s_de;", fns)
				_p("")
			else
				_p("INCBIN(%s, %q);", fns, fi)
				local f = io.open(fn, 'r')
				local s = f:read("*all")
				f:close()
				s = s:gsub('\r', ''):gsub('\t', ' '):gsub('\n', '\\n')
				_p("const char* g_%s_de = %q;", fns, s)
				_p("")
			end
		end

		if header then
			_p("")
			_p("#endif // %s", define)
			_p("")
		end

		out:write(io.endcapture())
		out:close()
	end

	function doembed()
	--	local embedfiles = os.matchfiles(path.join(script_path, "..", "", ""))
	--	embed(embedfiles, path.join(script_path,"..", "Decoder", "embedded.h"), true)
	--	embed(embedfiles, path.join(script_path,"..", "Decoder", "embedded.c"))
	end
